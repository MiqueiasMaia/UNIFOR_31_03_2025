name: GitHub CI

on:
  pull_request_review:
    types: [submitted]

permissions:
  contents: write
  pull-requests: write

jobs:
  process-pr:
    runs-on: ubuntu-latest

    steps:
      - name: Verificar se a PR foi aprovada
        id: check_approval
        run: |
          if [[ "${{ github.event.review.state }}" == "approved" ]]; then
            echo "approved=true" >> $GITHUB_ENV
          else
            echo "approved=false" >> $GITHUB_ENV
          fi

      - name: Verificar tipo da branch
        if: env.approved == 'true'
        id: check_branch_type
        run: |
          HEAD_REF="${{ github.event.pull_request.head.ref }}"
          if [[ "$HEAD_REF" == "dev" ]]; then
            echo "branch_type=dev" >> $GITHUB_ENV
          elif [[ "$HEAD_REF" =~ ^release/ ]]; then
            echo "branch_type=release" >> $GITHUB_ENV
            # Extrair a versão do nome da branch
            VERSION=$(echo "$HEAD_REF" | sed 's/release\///')
            echo "version=$VERSION" >> $GITHUB_ENV
          else
            echo "branch_type=feature" >> $GITHUB_ENV
          fi

      - name: Checkout do repositório
        if: env.approved == 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configurar Git
        if: env.approved == 'true'
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'

      - name: Fazer merge automático (dev para main)
        if: env.approved == 'true' && env.branch_type == 'dev'
        run: |
          gh pr merge ${{ github.event.pull_request.number }} --merge --auto
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Fazer merge automático (outras branches)
        if: env.approved == 'true' && env.branch_type == 'feature'
        run: |
          gh pr merge ${{ github.event.pull_request.number }} --merge --auto --delete-branch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Processar release
        if: env.approved == 'true' && env.branch_type == 'release'
        run: |
          # Criar a tag
          git tag -a "v${{ env.version }}" -m "Release v${{ env.version }}"
          git push origin "v${{ env.version }}"
          
          # Criar a release
          gh release create "v${{ env.version }}" \
            --title "Release v${{ env.version }}" \
            --notes "Release v${{ env.version }}"
          
          # Fazer merge da PR
          gh pr merge ${{ github.event.pull_request.number }} --merge --auto
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Sincronizar main com dev após release
        if: env.approved == 'true' && env.branch_type == 'release'
        run: |
          # Aguardar o merge da PR ser concluído
          sleep 5
          
          # Fazer fetch de todas as branches
          git fetch origin main dev
          
          # Criar uma nova branch para o merge
          BRANCH_NAME="sync-main-to-dev-$(date +%s)"
          git checkout -b $BRANCH_NAME
          
          # Fazer merge da main
          git merge origin/main --no-ff -m "chore: sync main into dev after release"
          
          # Fazer push da branch
          git push origin $BRANCH_NAME
          
          # Criar e fazer merge da PR
          gh pr create \
            --title "chore: sync main into dev after release" \
            --body "Sincronização automática da main para dev após release" \
            --base dev \
            --head $BRANCH_NAME
            
          # Aguardar a PR ser criada
          sleep 5
          
          # Fazer merge da PR
          gh pr merge $BRANCH_NAME --merge --auto
          
          # Limpar a branch temporária
          git push origin --delete $BRANCH_NAME
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} 